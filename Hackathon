"""
This sample demonstrates a simple skill built with the Amazon Alexa Skills Kit.
The Intent Schema, Custom Slots, and Sample Utterances for this skill, as well
as testing instructions are located at http://amzn.to/1LzFrj6

For additional samples, visit the Alexa Skills Kit Getting Started guide at
http://amzn.to/1LGWsLG
"""

from __future__ import print_function
from weather import Weather


# --------------- Helpers that build all of the responses ----------------------

def build_speechlet_response(title, output, reprompt_text, should_end_session):
    return {
        'outputSpeech': {
            'type': 'PlainText',
            'text': output
        },
        'card': {
            'type': 'Simple',
            'title': "SessionSpeechlet - " + title,
            'content': "SessionSpeechlet - " + output
        },
        'reprompt': {
            'outputSpeech': {
                'type': 'PlainText',
                'text': reprompt_text
            }
        },
        'shouldEndSession': should_end_session
    }


def build_response(session_attributes, speechlet_response):
    return {
        'version': '1.0',
        'sessionAttributes': session_attributes,
        'response': speechlet_response
    }


def getWeatherData(loccity):
    weather = Weather()

    location = weather.lookup_by_location(loccity)
    condition = location.condition()
    weatherData = condition._condition_data  # dictionary type. get the .['text'] and .['temp'] keys.
    return "Weather in " + loccity + "is" + weatherData['text'] + "and is " + str(((int(weatherData['temp']))-32.0)*(5.0/9.0)) + "degrees Celsius."


# --------------- Functions that control the skill's behavior ------------------

def get_welcome_response():
    """ If we wanted to initialize the session to have some attributes we could
    add those here
    """

    session_attributes = {}
    card_title = "Welcome"
    speech_output = "Hello Hacker! What do you want me to do today?"
    # If the user either does not reply to the welcome message or says something
    # that is not understood, they will be prompted again with this text.
    reprompt_text = "Let's try again, Hacker! What do you want me to do today?"
    should_end_session = False
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def handle_session_end_request():
    card_title = "Session Ended"
    speech_output = "Thank you"
    # Setting this to true ends the session and exits the skill.
    should_end_session = True
    return build_response({}, build_speechlet_response(
        card_title, speech_output, None, should_end_session))


def choose_a_mode(intent, session):
    card_title = intent['name']
    SelectedMode = intent['slots']['Mode']['value']
    session_attributes = {}
    should_end_session = False
    if SelectedMode == "programming" or SelectedMode == "code" or SelectedMode == "program":
        speech_output = "What programming language do you want to learn?"
    else:
        speech_output = "I will make your journey more entertaining. Where are we travelling?"
    reprompt_text = "Can you repeat please?"
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def choose_a_language(intent, session):
    card_title = intent['name']
    LangSelected = intent['slots']['Language']['value']
    session_attributes = {}
    should_end_session = False
    if LangSelected == "C plus plus":
        speech_output = LangSelected + "selected. How do you want to begin? Tutorials, Algorithms or Data Structures?"
    elif LangSelected == "python":
        speech_output = LangSelected + "selected. How do you want to begin? Tutorials, Algorithms or Data Structures?"
    else:
        speech_output = "At the moment, I can't teach" + LangSelected
    reprompt_text = "Can you repeat please?"
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def choose_a(intent, session):
    card_title = intent['name']
    chose = intent['slots']['Smth']['value']
    session_attributes = {}
    should_end_session = False
    if chose == "Tutorials" or chose == "Data Structures":
        speech_output = "Unfortunately this function is still under construction"
    else:
        speech_output = "Choose from the list: Binary Search, Euclid's algorithm"
    reprompt_text = "Can you repeat please?"
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def choose_an_algorithm(intent, session):
    card_title = intent['name']
    SelectedAlg = intent['slots']['Algorithm']['value']
    session_attributes = {}
    should_end_session = False
    if SelectedAlg == "binary search":
        speech_output = "The algorithm returns the position of a target value within a sorted array by comparing" \
                        "the target value with the middle element; if they are unequal, the half in" \
                        "which the target cannot lie is eliminated and the search continues on the remaining" \
                        "half until it is successful"
    else:
        speech_output = "The algorithm is an efficient method for computing the greatest common divisor (GCD) of " \
                        "two numbers, the largest number that divides both of them without leaving a remainder."
    reprompt_text = "Can you repeat please?"
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


def get_weather(intent, session):
    card_title = intent['name']
    cityy = intent['slots']['City']['value']
    session_attributes = {}
    should_end_session = False
    speech_output = getWeatherData(cityy)
    reprompt_text = "Can you repeat please?"
    return build_response(session_attributes, build_speechlet_response(
        card_title, speech_output, reprompt_text, should_end_session))


# --------------- Events ------------------

def on_session_started(session_started_request, session):
    """ Called when the session starts """

    print("on_session_started requestId=" + session_started_request['requestId']
          + ", sessionId=" + session['sessionId'])


def on_launch(launch_request, session):
    """ Called when the user launches the skill without specifying what they
    want
    """

    print("on_launch requestId=" + launch_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # Dispatch to your skill's launch
    return get_welcome_response()


def on_intent(intent_request, session):
    """ Called when the user specifies an intent for this skill """

    print("on_intent requestId=" + intent_request['requestId'] +
          ", sessionId=" + session['sessionId'])

    intent = intent_request['intent']
    intent_name = intent_request['intent']['name']

    # Dispatch to your skill's intent handlers
    if intent_name == "SelectMode":
        return choose_a_mode(intent, session)
    elif intent_name == "SelectLanguage":
        return choose_a_language(intent, session)
    elif intent_name == "SelectSmth":
        return choose_a(intent, session)
    elif intent_name == "SelectAlgorithm":
        return choose_an_algorithm(intent, session)
    elif intent_name == "Weather":
        return get_weather(intent, session)
    elif intent_name == "AMAZON.HelpIntent":
        return get_welcome_response()
    elif intent_name == "AMAZON.CancelIntent" or intent_name == "AMAZON.StopIntent":
        return handle_session_end_request()
    else:
        raise ValueError("Invalid intent")


def on_session_ended(session_ended_request, session):
    """ Called when the user ends the session.

    Is not called when the skill returns should_end_session=true
    """
    print("on_session_ended requestId=" + session_ended_request['requestId'] +
          ", sessionId=" + session['sessionId'])
    # add cleanup logic here


# --------------- Main handler ------------------

def lambda_handler(event, context):
    """ Route the incoming request based on type (LaunchRequest, IntentRequest,
    etc.) The JSON body of the request is provided in the event parameter.
    """
    print("event.session.application.applicationId=" +
          event['session']['application']['applicationId'])

    """
    Uncomment this if statement and populate with your skill's application ID to
    prevent someone else from configuring a skill that sends requests to this
    function.
    """
    # if (event['session']['application']['applicationId'] !=
    #         "amzn1.echo-sdk-ams.app.[unique-value-here]"):
    #     raise ValueError("Invalid Application ID")

    if event['session']['new']:
        on_session_started({'requestId': event['request']['requestId']},
                           event['session'])

    if event['request']['type'] == "LaunchRequest":
        return on_launch(event['request'], event['session'])
    elif event['request']['type'] == "IntentRequest":
        return on_intent(event['request'], event['session'])
    elif event['request']['type'] == "SessionEndedRequest":
        return on_session_ended(event['request'], event['session'])
